name: Git Star Boost üöÄ‚≠ê

on:
  push:
    branches:
      - main  # Roda no push para a branch 'main'
  schedule:
    - cron: '0 0 * * *'  # Roda todos os dias √† meia-noite (formato cron)

jobs:
  boost:
    runs-on: windows-latest  # Usando o runner Windows

    steps:
      # Passo 1: Checkout do reposit√≥rio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Passo 2: Executar o script PowerShell
      - name: Run Git Star Boost Script
        run: |
          # Define o caminho onde os reposit√≥rios Git est√£o localizados
          $reposPath = $env:GITHUB_WORKSPACE  # Usa o diret√≥rio onde o reposit√≥rio foi clonado

          # Lista de reposit√≥rios a serem ignorados
          $blacklist = @("repo1", "repo2", "repo3", "repo4")  # Adicione os reposit√≥rios que voc√™ quer ignorar

          # Obt√©m todos os reposit√≥rios no diret√≥rio especificado
          $repos = Get-ChildItem -Path $reposPath -Directory

          # Verifica se o GPG (para assinar commits) est√° dispon√≠vel no sistema
          $gpgAvailable = (Get-Command gpg -ErrorAction SilentlyContinue) -ne $null
          $gpgConfigured = $false

          # Se o GPG estiver dispon√≠vel, verifica se est√° configurado para assinar commits no Git
          if ($gpgAvailable) {
              $gpgConfigured = git config --global user.signingkey
          }

          # Itera sobre cada reposit√≥rio encontrado
          foreach ($repo in $repos) {
              $repoPath = $repo.FullName

              # Pula reposit√≥rios que est√£o na lista negra
              if ($blacklist -contains $repo.Name) {
                  Write-Host "Skipping repository $repo.Name"
                  continue  # Pula para o pr√≥ximo reposit√≥rio
              }

              # Verifica se o diret√≥rio √© um reposit√≥rio Git v√°lido
              $gitFolder = Join-Path $repoPath ".git"
              if (Test-Path $gitFolder) {
                  Write-Host "Git repository found: $repoPath"

                  Set-Location -Path $repoPath  # Muda para o diret√≥rio do reposit√≥rio

                  # Atualiza o reposit√≥rio com as √∫ltimas mudan√ßas
                  git pull
                  git status
                  git stash -u
                  git reset --hard
                  git clean -fd

                  # Busca commits com a mensagem '#UPDATE' e remove-os
                  $commitHashes = git log --oneline | Select-String "#UPDATE" | ForEach-Object { $_.Line.Split(' ')[0] }
                  foreach ($commitHash in $commitHashes) {
                      Write-Host "Removing commit $commitHash with the '#UPDATE' message"
                      git rebase --onto $commitHash^ $commitHash  # Remove o commit do hist√≥rico
                  }

                  # Cria um arquivo tempor√°rio para fazer um commit sem alterar o conte√∫do do reposit√≥rio
                  $fileName = Join-Path $repoPath "temp_file"
                  New-Item -Path $fileName -ItemType File -Force  # Cria o arquivo tempor√°rio

                  git add $fileName

                  # Cria o commit (com ou sem assinatura GPG)
                  if ($gpgConfigured) {
                      git commit --gpg-sign -m "#TEMP"
                  } else {
                      git commit -m "#TEMP"
                  }

                  # Remove o arquivo tempor√°rio ap√≥s o commit
                  Remove-Item $fileName

                  git rm $fileName

                  # Cria o commit final
                  if ($gpgConfigured) {
                      git commit --gpg-sign -m "#UPDATE"
                  } else {
                      git commit -m "#UPDATE"
                  }

                  # For√ßa o push para o reposit√≥rio remoto (sobrescreve a hist√≥ria)
                  git push --force
                  git stash pop
                  git status

              } else {
                  Write-Host ".git not found: $repoPath"
              }
          }

          Write-Host "Done!"
